$date
	Sun May 12 09:45:05 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Single_Cycle_top_tb $end
$var reg 1 ! clk $end
$scope module Single_Cycle_dut $end
$var wire 1 " PCMUXSel $end
$var wire 1 ! clk $end
$var wire 7 # func7 [6:0] $end
$var wire 3 $ func3 [2:0] $end
$var wire 32 % WriteData [31:0] $end
$var wire 1 & UncBr $end
$var wire 5 ' Rs2 [4:0] $end
$var wire 5 ( Rs1 [4:0] $end
$var wire 1 ) RegWrEn $end
$var wire 32 * ReadData2 [31:0] $end
$var wire 32 + ReadData1 [31:0] $end
$var wire 5 , Rd [4:0] $end
$var wire 1 - PCtoReg $end
$var wire 32 . PCplus4 [31:0] $end
$var wire 32 / OprB [31:0] $end
$var wire 1 0 OffsetBase $end
$var wire 32 1 NextPC [31:0] $end
$var wire 1 2 MemtoReg $end
$var wire 1 3 MemWrEn $end
$var wire 1 4 MemRdEn $end
$var wire 32 5 MemOrALU [31:0] $end
$var wire 32 6 Instruction [31:0] $end
$var wire 32 7 Imm [31:0] $end
$var wire 32 8 DataMemOut [31:0] $end
$var wire 32 9 CurrentPC [31:0] $end
$var wire 1 : BrEn $end
$var wire 32 ; AddrCalSrc [31:0] $end
$var wire 32 < AddrCal [31:0] $end
$var wire 1 = ALUSrc $end
$var wire 32 > ALUOut [31:0] $end
$var wire 2 ? ALUOp [1:0] $end
$var wire 1 @ ALUFlag $end
$scope module ALU_and_ALU_Control_main $end
$var wire 3 A Funct3_i [2:0] $end
$var wire 7 B Funct7_i [6:0] $end
$var wire 32 C Result_o [31:0] $end
$var wire 32 D OperandB_i [31:0] $end
$var wire 32 E OperandA_i [31:0] $end
$var wire 1 @ Flag_o $end
$var wire 2 F ALUOp_i [1:0] $end
$var wire 4 G ALUCtrl_wire [3:0] $end
$scope module ALU_control_dut $end
$var wire 3 H Funct3_i [2:0] $end
$var wire 7 I Funct7_i [6:0] $end
$var wire 2 J ALUOp_i [1:0] $end
$var reg 4 K ALUCtrl_o [3:0] $end
$upscope $end
$scope module ALU_dut $end
$var wire 4 L ALUCtrl_i [3:0] $end
$var wire 3 M Flagsel_i [2:0] $end
$var wire 32 N OperandB_i [31:0] $end
$var wire 32 O OperandA_i [31:0] $end
$var reg 1 P EQ $end
$var reg 1 @ Flag_o $end
$var reg 1 Q GE $end
$var reg 1 R GEU $end
$var reg 1 S LT $end
$var reg 1 T LTU $end
$var reg 1 U NE $end
$var reg 32 V Result_o [31:0] $end
$upscope $end
$upscope $end
$scope module AddrCalAdder $end
$var wire 32 W Sum_o [31:0] $end
$var wire 32 X B_i [31:0] $end
$var wire 32 Y A_i [31:0] $end
$upscope $end
$scope module AddrCalSrcMUX $end
$var wire 1 0 sel $end
$var wire 32 Z B_i [31:0] $end
$var wire 32 [ A_i [31:0] $end
$var reg 32 \ Out_o [31:0] $end
$upscope $end
$scope module Controlunit $end
$var wire 7 ] Opcode [6:0] $end
$var wire 32 ^ Instruction_i [31:0] $end
$var reg 2 _ ALUOp_o [1:0] $end
$var reg 1 = ALUSrc_o $end
$var reg 1 : BrEn_o $end
$var reg 1 4 MemRdEn_o $end
$var reg 1 3 MemWrEn_o $end
$var reg 1 2 MemtoReg_o $end
$var reg 1 0 OffsetBase_o $end
$var reg 1 - PCtoReg_o $end
$var reg 1 ) RegWrEn_o $end
$var reg 1 & UncBr_o $end
$upscope $end
$scope module DataMemory $end
$var wire 32 ` Address_i [31:0] $end
$var wire 1 4 ReadEn_i $end
$var wire 1 3 WriteEn_i $end
$var wire 1 ! clk $end
$var wire 32 a WriteData_i [31:0] $end
$var wire 32 b DataMemory_0 [31:0] $end
$var reg 32 c Data_o [31:0] $end
$upscope $end
$scope module ImmExt $end
$var wire 32 d Instruction_i [31:0] $end
$var reg 32 e Immediate_o [31:0] $end
$upscope $end
$scope module InstrMem $end
$var wire 32 f PC_i [31:0] $end
$var reg 32 g Instruction_o [31:0] $end
$upscope $end
$scope module MemtoRegMUX $end
$var wire 32 h A_i [31:0] $end
$var wire 32 i B_i [31:0] $end
$var wire 1 2 sel $end
$var reg 32 j Out_o [31:0] $end
$upscope $end
$scope module OperandBMUX $end
$var wire 32 k B_i [31:0] $end
$var wire 1 = sel $end
$var wire 32 l A_i [31:0] $end
$var reg 32 m Out_o [31:0] $end
$upscope $end
$scope module PC1 $end
$var wire 1 ! clk $end
$var wire 32 n NextAddr [31:0] $end
$var reg 32 o CurrentAddr [31:0] $end
$upscope $end
$scope module PCInc $end
$var wire 32 p A_i [31:0] $end
$var wire 32 q B_i [31:0] $end
$var wire 32 r Sum_o [31:0] $end
$upscope $end
$scope module PCMUX $end
$var wire 32 s A_i [31:0] $end
$var wire 32 t B_i [31:0] $end
$var wire 1 " sel $end
$var reg 32 u Out_o [31:0] $end
$upscope $end
$scope module RegisterFile $end
$var wire 5 v ReadReg1 [4:0] $end
$var wire 5 w ReadReg2 [4:0] $end
$var wire 1 ) RegWrEn $end
$var wire 32 x Reg_out_0 [31:0] $end
$var wire 32 y Reg_out_1 [31:0] $end
$var wire 32 z Reg_out_10 [31:0] $end
$var wire 32 { Reg_out_11 [31:0] $end
$var wire 32 | Reg_out_12 [31:0] $end
$var wire 32 } Reg_out_13 [31:0] $end
$var wire 32 ~ Reg_out_14 [31:0] $end
$var wire 32 !" Reg_out_15 [31:0] $end
$var wire 32 "" Reg_out_16 [31:0] $end
$var wire 32 #" Reg_out_17 [31:0] $end
$var wire 32 $" Reg_out_18 [31:0] $end
$var wire 32 %" Reg_out_19 [31:0] $end
$var wire 32 &" Reg_out_2 [31:0] $end
$var wire 32 '" Reg_out_20 [31:0] $end
$var wire 32 (" Reg_out_21 [31:0] $end
$var wire 32 )" Reg_out_22 [31:0] $end
$var wire 32 *" Reg_out_23 [31:0] $end
$var wire 32 +" Reg_out_24 [31:0] $end
$var wire 32 ," Reg_out_25 [31:0] $end
$var wire 32 -" Reg_out_26 [31:0] $end
$var wire 32 ." Reg_out_27 [31:0] $end
$var wire 32 /" Reg_out_28 [31:0] $end
$var wire 32 0" Reg_out_29 [31:0] $end
$var wire 32 1" Reg_out_3 [31:0] $end
$var wire 32 2" Reg_out_30 [31:0] $end
$var wire 32 3" Reg_out_31 [31:0] $end
$var wire 32 4" Reg_out_4 [31:0] $end
$var wire 32 5" Reg_out_5 [31:0] $end
$var wire 32 6" Reg_out_6 [31:0] $end
$var wire 32 7" Reg_out_7 [31:0] $end
$var wire 32 8" Reg_out_8 [31:0] $end
$var wire 32 9" Reg_out_9 [31:0] $end
$var wire 5 :" WriteReg [4:0] $end
$var wire 1 ! clk $end
$var wire 32 ;" WriteData [31:0] $end
$var reg 32 <" ReadData1 [31:0] $end
$var reg 32 =" ReadData2 [31:0] $end
$upscope $end
$scope module WriteDataMUX $end
$var wire 32 >" A_i [31:0] $end
$var wire 32 ?" B_i [31:0] $end
$var wire 1 - sel $end
$var reg 32 @" Out_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
b100 p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
xT
xS
xR
xQ
xP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
bx ?
bx >
x=
bx <
bx ;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
x4
x3
x2
bx 1
x0
bx /
bx .
x-
bx ,
bx +
bx *
x)
bx (
bx '
x&
bx %
bx $
bx #
x"
0!
$end
#5
1!
#10
0!
#15
1!
#20
0!
#25
1!
#30
0!
#35
1!
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
